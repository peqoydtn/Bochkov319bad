#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

int dLevin(string s1, string s2, int Ins, int Del, int Rep) {
    int M = s1.size(), N = s2.size();
    vector <vector <int>> d(M + 1, vector <int> (N + 1));
    d[0][0] = 0;
    for (int j = 1; j <= N; ++j)
        d[0][j] = d[0][j - 1] + Ins;
    for (int i = 1; i <= M; ++i) {
        d[i][0] = d[i - 1][0] + Del;
    for (int j = 1; j <= N; ++j) {
        if (s1[i] != s2[j])
            d[i][j] = min(min(d[i - 1][j] + Del, d[i][j - 1] + Ins), d[i - 1][j - 1] + Rep);
        else
            d[i][j] = d[i - 1][j - 1];
        }
    }
return d[M][N];
}

int main() {
    string s1, s2;
    int Ins, Del, Rep;
    getline(cin, s1);
    getline(cin, s2);
    cin >> Ins >> Del >> Rep;
    cout << dLevin(s1, s2, Ins, Del, Rep);
return 0;
}
